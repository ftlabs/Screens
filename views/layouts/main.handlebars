<!DOCTYPE html>
<html class="core">
<head>
	<title>{{title}}{{^title}}FT Screens{{/title}}</title>
	<meta charset="utf-8" />
	<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<meta name="description" content="Control digital signage screens at the FT - update content and organise your screens" />
	{{#redirect}}
		<script>
			function parse(str) {
				if (typeof str !== 'string') {
					return {};
				}

				str = str.trim().replace(/^(\?|#|&)/, '');

				if (!str) {
					return {};
				}

				return str.split('&').reduce(function (ret, param) {
					var parts = param.replace(/\+/g, ' ').split('=');
					var key = parts[0];
					var val = parts[1];

					key = decodeURIComponent(key);

					// missing `=` should be `null`:
					// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
					val = val === undefined ? null : decodeURIComponent(val);

					if (!ret.hasOwnProperty(key)) {
						ret[key] = val;
					} else if (Array.isArray(ret[key])) {
						ret[key].push(val);
					} else {
						ret[key] = [ret[key], val];
					}

					return ret;
				}, {});
			};

			function stringify(obj) {
				return obj ? Object.keys(obj).sort().map(function (key) {
					var val = obj[key];

					if (Array.isArray(val)) {
						return val.sort().map(function (val2) {
							return encodeURI(key) + '=' + encodeURI(val2);
						}).join('&');
					}

					return encodeURI(key) + '=' + encodeURI(val);
				}).join('&') : '';
			};

			var origin = window.location.origin;
			var path = window.location.pathname;
			var filter = stringify({filter:parse(window.location.search).filter});
			var l = origin + path + '?' + filter
			window.location = l;
		</script>
	{{/redirect}}
	{{^redirect}}
	<!--
		Hide any enhanced experience content when in core mode, and vice versa.
		Add any other inlined CSS here
	-->
	<style>
		.core .o--if-js,
		.enhanced .o--if-no-js { display: none !important; }
	</style>

	{{#if app}}<!--
		This is where your CSS bundle is loaded, and we add any inline CSS
	-->
	<link rel="stylesheet" href="/build/{{{app}}}/bundle.css" />
	{{/if}}

	<!--
		Unconditionally load the polyfill service to provide the best support
		possible for modern web standards.
		Only features missing in this user agent will be filled.
		If you want, you can provide a list of features to polyfill, otherwise
		all features that can be polyfilled will be.
		See the polyfill service home page for more details:
		https://cdn.polyfill.io/
	-->
	<script src="https://cdn.polyfill.io/v3/polyfill.min.js?features=default,fetch,Promise,Array.prototype.find"></script>

	<!--
		Perform your cuts the mustard test.
	-->
	<script>
		'use strict';
		window.cutsTheMustard = !!Promise;

		if (window.cutsTheMustard) {
			// Swap the `core` class on the HTML element for an `enhanced` one
			// We're doing it early in the head to avoid a flash of unstyled content
			document.documentElement.className = document.documentElement.className.replace(/\bcore\b/g, 'enhanced');
		}
	</script>
	{{/redirect}}
</head>
<body>
	{{^redirect}}
		{{{body}}}

		<!--
			Load the main JavaScript bundle asynchronously
		-->
		<script>
			'use strict';
			(function(srcs) {
				function addScript(url) {
					return new Promise(function (resolve, reject) {
						var s = document.createElement('script');
						s.setAttribute('src', url);
						s.onload = resolve;
						s.onerror = reject;
						document.head.appendChild(s);
					});
				}

				// Force it to be on http.
				if(window.location.protocol==="https:") {
					window.location.protocol="http";
				}

				if (!window.cutsTheMustard) return;
				Promise.all(srcs.map(addScript)).then(function() {

					if(window.screensInit){
						window.screensInit();
					}

				}).catch(function (e) {
					console.log(e.message || e);
				});
			}([
				{{#if app}}'/build/{{{app}}}/bundle.js',{{/if}}
				'https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js'
			]));
		</script>
	{{/redirect}}
</body>
</html>
